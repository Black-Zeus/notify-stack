services:
  bkn_notify:
    build:
      context: .
      dockerfile: ./dockerfile/bkn_notify.Dockerfile
    container_name: bkn_notify
    env_file:
      - ./Config/secrets.env
    volumes:
      - ./Config:/app/Config:ro
      - ./Stacks/bkn_notify/templates:/app/templates:ro
      - ./Stacks/bkn_notify/logs:/app/logs
    depends_on:
      - bkn_redis
    networks:
      - backend
      - frontend
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/healthz')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  bkn_celery:
    build:
      context: .
      dockerfile: ./dockerfile/bkn_celery.Dockerfile
    container_name: bkn_celery
    env_file:
      - ./Config/secrets.env
    volumes:
      - ./Config:/app/Config:ro
      - ./Stacks/bkn_notify/templates:/app/templates:ro
      - ./Stacks/bkn_notify/logs:/app/logs
    depends_on:
      - bkn_redis
    networks:
      - backend
    restart: unless-stopped
    command: ["celery", "-A", "services.celery_app", "worker", "--loglevel=info", "--concurrency=2"]

  bkn_celery_beat:
    build:
      context: .
      dockerfile: ./dockerfile/bkn_celery.Dockerfile
    container_name: bkn_celery_beat
    env_file:
      - ./Config/secrets.env
    volumes:
      - ./Config:/app/Config:ro
      - ./Stacks/bkn_notify/templates:/app/templates:ro
      - ./Stacks/bkn_notify/logs:/app/logs
    depends_on:
      - bkn_redis
    networks:
      - backend
    restart: unless-stopped
    command: ["celery", "-A", "services.celery_app", "beat", "--loglevel=info"]

  bkn_redis:
    image: redis:7-alpine
    container_name: bkn_redis
    networks:
      - backend
    volumes:
      - redis_data:/data
    restart: unless-stopped
    
    # Recursos para Redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    command: [
      "redis-server", 
      "--appendonly", "yes",
      "--maxmemory", "200mb",
      "--maxmemory-policy", "allkeys-lru",
      "--save", "900", "1",
      "--save", "300", "10",
      "--save", "60", "10000"
    ]
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  # front:
  #   image: nginx:alpine
  #   container_name: front
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     bkn_notify:
  #       condition: service_healthy
  #   networks:
  #     - frontend
  #   volumes:
  #     - ./Config/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./Config/ssl:/etc/nginx/ssl:ro
  #   restart: unless-stopped
    
  #   # Recursos para Nginx
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 128M
  #       reservations:
  #         cpus: '0.05'
  #         memory: 32M
    
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 5s

volumes:
  redis_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16